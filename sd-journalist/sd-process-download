#!/usr/bin/env python

import sys
import time
import os
import tarfile
import tempfile
import os.path
import subprocess

fn = sys.argv[1]


# remember your Stevens and do a double fork
def spawn_monitor_process(sigfile):

    try:
        pid = os.fork()
        if pid > 0:
            # congrats, new parent!
            return
    except OSError as e:
        print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)

    os.setsid()

    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent. init process inherits child
            sys.exit(0)
    except OSError, e:
        print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)

    subprocess.Popen(["python", "/usr/local/bin/sd-process-display", sigfile])
    sys.exit(0)


def wait_for_sigfile(sigfile):
    started = int(time.time())

    while os.path.isfile(sigfile) is False:
        if int(time.time() - started > 30):
            print "Waited too long for monitoring process!"
            sys.exit(1)

        time.sleep(0.5)
        print "{} is still not a file".format(sigfile)

    os.remove(sigfile)


# spawn the GUI monitoring process, then wait for it to be available...
sigfile = tempfile.mktemp()
spawn_monitor_process(sigfile)
wait_for_sigfile(sigfile)

# Later processing expects a tarball of downloaded zip files (to allow
# processing of multiple zip's at once). In the case of this script, we'll
# only every have a single zip to process, but we still need to put it in
# a tarball.


if os.path.isfile(fn) is False:
    c = subprocess.Popen(["/usr/local/bin/sd-process-feedback"],
                         stdin=subprocess.PIPE)
    c.communicate('DOWNLOAD_FILE_MISSING\n')
    sys.exit()

fh = tempfile.NamedTemporaryFile(suffix=".sd-xfer", delete=False)
out_tar = tarfile.open(mode='w', fileobj=fh)
out_tar.add(fn, arcname=os.path.basename(fn))
out_tar.close()
fh.close()

# this is sort of a one-off... how shall we send messages to the GUI
# from the same machine? This can only happen on sd-journalist.
c = subprocess.Popen(["/usr/local/bin/sd-process-feedback"],
                     stdin=subprocess.PIPE)
c.communicate(input="DOWNLOAD_BUNDLE_CREATED\n")

# ship this to the next phase
subprocess.call(["qvm-open-in-vm", "sd-decrypt", fh.name])
os.remove(fh.name)
