#!/usr/bin/env python
import sys
import tarfile
import tempfile
import os
import fnmatch
import zipfile
import glob
import subprocess
import shutil
import re
import gzip


def send_progress(msg):
    p = subprocess.Popen(["qrexec-client-vm", "sd-journalist",
                         "sd-process.Feedback"],
                         close_fds=True,
                         stdin=subprocess.PIPE)
    p.communicate(msg)


input = sys.argv[1]

send_progress("DECRYPTION_PROCESS_START")

# a nice place to work...
tmpdir = tempfile.mkdtemp()

# we get given a tarball of everything the user has downloaded.
# first step, extract that archive
try:

    with tarfile.open(input) as tar:
        # potentially unsafe, can create arbitrary files on the filesystem
        # given a malicious tarball
        tar.extractall(tmpdir)

except Exception as e:
    send_progress("DECRYPTION_BUNDLE_OPEN_FAILURE")
    # although we're exiting with failure, we return a
    # 0 exit code so xdg does not try to re-open this file with
    # another application
    sys.exit(0)

send_progress("SUBMISSION_BUNDLE_UNBUNDLED")

# everything in the archive should be zips, as created by SD
# let's unzip those here
zips = glob.glob(tmpdir + "/*zip")
for z in zips:
    with zipfile.ZipFile(z) as zf:
        zf.extractall(tmpdir + "/extracted/")
    os.unlink(z)

gpgs = glob.glob(os.path.join(tmpdir, "*gpg"))
for g in gpgs:
    match = re.search('\d-(.*)-(msg|doc).*$', g)
    source = match.group(1)
    target = "{}/extracted/{}".format(tmpdir, source)

    if not os.path.exists(target):
        os.makedirs(target)

    os.rename(g, os.path.join(target, os.path.basename(g)))

send_progress("SUBMISSION_FILES_EXTRACTED")

# great, we should be left with a directory tree filled with files
# encrypted to our public key. let's find those and decrypt them
for root, dirnames, filenames in os.walk(tmpdir):
    for fn in fnmatch.filter(filenames, '*.gpg'):
        [fn_no_ext, _] = os.path.splitext(fn)

        out = open(os.path.join(root, fn_no_ext), 'w')
        err = tempfile.NamedTemporaryFile(suffix=".gpg-err")
        cmd = ["qubes-gpg-client", "--decrypt", os.path.join(root, fn)]
        res = subprocess.call(cmd, stdout=out, stderr=err)
        out.close()
        os.unlink(os.path.join(root, fn))
        if res != 0:
            os.unlink(os.path.join(root, fn_no_ext))
            with open(err.name) as e:
                msg = e.read()
                send_progress("SUBMISSION_FILE_DECRYPTION_FAILED")
        else:
            send_progress("SUBMISSION_FILE_DECRYPTION_SUCCEEDED")
        err.close()

# almost done. some docs are gzipped, so let's ungzip them. also,
# torbrowser (?) seems to add numeric suffixes to files if they've
# been previously downloaded, even if those files are not in the
# download directory? so we need to deal with stripping those numbers
# off the end of filenames. This happens with single-file downloads,
# not tar files (since those tar files have a different name every
# time they're downloaded)

any_files = False
for root, dirnames, filenames in os.walk(tmpdir):

    # first let's find "msg" files
    for fn in fnmatch.filter(filenames, '*-msg*'):
        orig_path = os.path.join(root, fn)
        any_files = True

        match = re.search('(.*-msg)(-\d)?$', orig_path)
        path_removed_number = match.group(1)
        os.rename(orig_path, path_removed_number)

    # and now find gzipped file submissions
    for fn in fnmatch.filter(filenames, '*.gz*'):
        orig_path = os.path.join(root, fn)
        any_files = True

        with gzip.open(orig_path, 'rb') as f:
            file_content = f.read()

        [ungz_path, _ext] = os.path.splitext(orig_path)

        with open(ungz_path, 'w') as f:
            f.write(file_content)

        os.unlink(orig_path)

if not any_files:
    send_progress("SUBMISSION_FILE_NO_FILES_FOUND")
    sys.exit(0)

# ok. we're going to send all the decrypted stuff to the svs vm.
# let's tar it all up again, so we can `qvm-open-in-vm` it.

fh = tempfile.NamedTemporaryFile(suffix=".sd-xfer-extracted", delete=False)
out_tar = tarfile.open(mode='w', fileobj=fh)
out_tar.add(os.path.join(tmpdir, "extracted"), arcname="extracted")
out_tar.close()
fh.close()

shutil.rmtree(tmpdir)

# finally! ship this off to sd-svs
subprocess.call(["qvm-open-in-vm", "sd-svs", fh.name])
os.unlink(fh.name)

# work around a qubes open-in-vm bug
# (https://groups.google.com/forum/#!topic/qubes-users/dxFa4ZXmPYc)
# shouldn't be an issue for disp vm's
os.unlink(input)
